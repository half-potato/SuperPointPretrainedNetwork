diff --git a/model.py b/model.py
index 7a8c7d2..50e8b93 100644
--- a/model.py
+++ b/model.py
@@ -1,6 +1,7 @@
 import torch
 import torch.nn.functional as F
 import numpy as np
+from . import util
 
 class SuperPointNet(torch.nn.Module):
   """ Pytorch definition of SuperPoint Network. """
@@ -80,70 +81,6 @@ class SuperPointFrontend(object):
                                map_location=lambda storage, loc: storage))
     self.net.eval()
 
-  def nms_fast(self, in_corners, H, W, dist_thresh):
-    """
-    Run a faster approximate Non-Max-Suppression on numpy corners shaped:
-      3xN [x_i,y_i,conf_i]^T
-  
-    Algo summary: Create a grid sized HxW. Assign each corner location a 1, rest
-    are zeros. Iterate through all the 1's and convert them either to -1 or 0.
-    Suppress points by setting nearby values to 0.
-  
-    Grid Value Legend:
-    -1 : Kept.
-     0 : Empty or suppressed.
-     1 : To be processed (converted to either kept or supressed).
-  
-    NOTE: The NMS first rounds points to integers, so NMS distance might not
-    be exactly dist_thresh. It also assumes points are within image boundaries.
-  
-    Inputs
-      in_corners - 3xN numpy array with corners [x_i, y_i, confidence_i]^T.
-      H - Image height.
-      W - Image width.
-      dist_thresh - Distance to suppress, measured as an infinty norm distance.
-    Returns
-      nmsed_corners - 3xN numpy matrix with surviving corners.
-      nmsed_inds - N length numpy vector with surviving corner indices.
-    """
-    grid = np.zeros((H, W)).astype(int) # Track NMS data.
-    inds = np.zeros((H, W)).astype(int) # Store indices of points.
-    # Sort by confidence and round to nearest int.
-    inds1 = np.argsort(-in_corners[2,:])
-    corners = in_corners[:,inds1]
-    rcorners = corners[:2,:].round().astype(int) # Rounded corners.
-    # Check for edge case of 0 or 1 corners.
-    if rcorners.shape[1] == 0:
-      return np.zeros((3,0)).astype(int), np.zeros(0).astype(int)
-    if rcorners.shape[1] == 1:
-      out = np.vstack((rcorners, in_corners[2])).reshape(3,1)
-      return out, np.zeros((1)).astype(int)
-    # Initialize the grid.
-    for i, rc in enumerate(rcorners.T):
-      grid[rcorners[1,i], rcorners[0,i]] = 1
-      inds[rcorners[1,i], rcorners[0,i]] = i
-    # Pad the border of the grid, so that we can NMS points near the border.
-    pad = dist_thresh
-    grid = np.pad(grid, ((pad,pad), (pad,pad)), mode='constant')
-    # Iterate through points, highest to lowest conf, suppress neighborhood.
-    count = 0
-    for i, rc in enumerate(rcorners.T):
-      # Account for top and left padding.
-      pt = (rc[0]+pad, rc[1]+pad)
-      if grid[pt[1], pt[0]] == 1: # If not yet suppressed.
-        grid[pt[1]-pad:pt[1]+pad+1, pt[0]-pad:pt[0]+pad+1] = 0
-        grid[pt[1], pt[0]] = -1
-        count += 1
-    # Get all surviving -1's and return sorted array of remaining corners.
-    keepy, keepx = np.where(grid==-1)
-    keepy, keepx = keepy - pad, keepx - pad
-    inds_keep = inds[keepy, keepx]
-    out = corners[:, inds_keep]
-    values = out[-1, :]
-    inds2 = np.argsort(-values)
-    out = out[:, inds2]
-    out_inds = inds1[inds_keep[inds2]]
-    return out, out_inds
 
   def run(self, img):
     """ Process a numpy image to extract points and descriptors.
@@ -180,14 +117,14 @@ class SuperPointFrontend(object):
     heatmap = np.reshape(nodust, [Hc, Wc, self.cell, self.cell])
     heatmap = np.transpose(heatmap, [0, 2, 1, 3])
     heatmap = np.reshape(heatmap, [Hc*self.cell, Wc*self.cell])
-    xs, ys = np.where(heatmap >= self.conf_thresh) # Confidence threshold.
+    xs, ys = np.where(heatmap > self.conf_thresh) # Confidence threshold.
     if len(xs) == 0:
       return np.zeros((3, 0)), None, None
     pts = np.zeros((3, len(xs))) # Populate point data sized 3xN.
     pts[0, :] = ys
     pts[1, :] = xs
     pts[2, :] = heatmap[xs, ys]
-    pts, _ = self.nms_fast(pts, H, W, dist_thresh=self.nms_dist) # Apply NMS.
+    pts, _ = util.nms_fast(pts, H, W, dist_thresh=self.nms_dist) # Apply NMS.
     inds = np.argsort(pts[2,:])
     pts = pts[:,inds[::-1]] # Sort by confidence.
     # Remove points along border.
@@ -213,4 +150,4 @@ class SuperPointFrontend(object):
       desc = torch.nn.functional.grid_sample(coarse_desc, samp_pts)
       desc = desc.data.cpu().numpy().reshape(D, -1)
       desc /= np.linalg.norm(desc, axis=0)[np.newaxis, :]
-    return pts, desc, heatmap
\ No newline at end of file
+    return pts, desc, heatmap
diff --git a/util.py b/util.py
index da18c98..d40b4bb 100644
--- a/util.py
+++ b/util.py
@@ -1,19 +1,85 @@
 import cv2
+import numpy as np
 
 def read_image(impath, img_size=None):
-  """ Read image as grayscale and resize to img_size.
-  Inputs
-    impath: Path to input image.
-    img_size: (W, H) tuple specifying resize size.
-  Returns
-    grayim: float32 numpy array sized H x W with values in range [0, 1].
-  """
-  grayim = cv2.imread(impath, cv2.IMREAD_GRAYSCALE)
-  if grayim is None:
-    raise Exception('Error reading image %s' % impath)
-  # Image is resized via opencv.
-  interp = cv2.INTER_AREA
-  if img_size is not None:
-    grayim = cv2.resize(grayim, (img_size[1], img_size[0]), interpolation=interp)
-  grayim = (grayim.astype('float32') / 255.)
-  return grayim
\ No newline at end of file
+    """ Read image as grayscale and resize to img_size.
+    Inputs
+        impath: Path to input image.
+        img_size: (W, H) tuple specifying resize size.
+    Returns
+        grayim: float32 numpy array sized H x W with values in range [0, 1].
+    """
+    grayim = cv2.imread(impath, cv2.IMREAD_GRAYSCALE)
+    if grayim is None:
+        raise Exception('Error reading image %s' % impath)
+    # Image is resized via opencv.
+    interp = cv2.INTER_AREA
+    if img_size is not None:
+        grayim = cv2.resize(grayim, (img_size[1], img_size[0]), interpolation=interp)
+    grayim = (grayim.astype('float32') / 255.)
+    return grayim
+
+def nms_fast(in_corners, H, W, dist_thresh):
+    """
+    Run a faster approximate Non-Max-Suppression on numpy corners shaped:
+      3xN [x_i,y_i,conf_i]^T
+
+    Algo summary: Create a grid sized HxW. Assign each corner location a 1, rest
+    are zeros. Iterate through all the 1's and convert them either to -1 or 0.
+    Suppress points by setting nearby values to 0.
+
+    Grid Value Legend:
+    -1 : Kept.
+     0 : Empty or suppressed.
+     1 : To be processed (converted to either kept or supressed).
+
+    NOTE: The NMS first rounds points to integers, so NMS distance might not
+    be exactly dist_thresh. It also assumes points are within image boundaries.
+
+    Inputs
+      in_corners - 3xN numpy array with corners [x_i, y_i, confidence_i]^T.
+      H - Image height.
+      W - Image width.
+      dist_thresh - Distance to suppress, measured as an infinty norm distance.
+    Returns
+      nmsed_corners - 3xN numpy matrix with surviving corners.
+      nmsed_inds - N length numpy vector with surviving corner indices.
+    """
+    grid = np.zeros((H, W)).astype(int) # Track NMS data.
+    inds = np.zeros((H, W)).astype(int) # Store indices of points.
+    # Sort by confidence and round to nearest int.
+    inds1 = np.argsort(-in_corners[2,:])
+    corners = in_corners[:,inds1]
+    rcorners = corners[:2,:].round().astype(int) # Rounded corners.
+    # Check for edge case of 0 or 1 corners.
+    if rcorners.shape[1] == 0:
+      return np.zeros((3,0)).astype(int), np.zeros(0).astype(int)
+    if rcorners.shape[1] == 1:
+      out = np.vstack((rcorners, in_corners[2])).reshape(3,1)
+      return out, np.zeros((1)).astype(int)
+    # Initialize the grid.
+    for i, rc in enumerate(rcorners.T):
+      grid[rcorners[1,i], rcorners[0,i]] = 1
+      inds[rcorners[1,i], rcorners[0,i]] = i
+    # Pad the border of the grid, so that we can NMS points near the border.
+    pad = dist_thresh
+    grid = np.pad(grid, ((pad,pad), (pad,pad)), mode='constant')
+    # Iterate through points, highest to lowest conf, suppress neighborhood.
+    count = 0
+    for i, rc in enumerate(rcorners.T):
+      # Account for top and left padding.
+      pt = (rc[0]+pad, rc[1]+pad)
+      if grid[pt[1], pt[0]] == 1: # If not yet suppressed.
+        grid[pt[1]-pad:pt[1]+pad+1, pt[0]-pad:pt[0]+pad+1] = 0
+        grid[pt[1], pt[0]] = -1
+        count += 1
+    # Get all surviving -1's and return sorted array of remaining corners.
+    keepy, keepx = np.where(grid==-1)
+    keepy, keepx = keepy - pad, keepx - pad
+    inds_keep = inds[keepy, keepx]
+    out = corners[:, inds_keep]
+    values = out[-1, :]
+    inds2 = np.argsort(-values)
+    out = out[:, inds2]
+    out_inds = inds1[inds_keep[inds2]]
+    return out, out_inds
